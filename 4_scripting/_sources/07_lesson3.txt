.. _convention-lesson: 

#############################
Exercise 3: Automation Script
#############################

The usual purpose of any program is to automate an operation, so that it can be 
performed repeatedly and reliably. 

Linux gurus have done an excellent job of automating basic Linux installation, 
and the same goes for managing individual software packages. However, it still 
may take a user somewhere between hours and weeks to get a system to behave 
exactly to her liking: right applications, right options, just-so configuration. 

This script will automate the application installation process for an Ubuntu 
desktop system which is used for productivity tasks or software development 
work.

.. sidebar:: Function confirm

   .. code-block:: bash

      # ===== Ask for confirmation
      # Requires $PROMPT, returns $EXIT
      confirm() {
        tput rev
        echo -n $PROMPT
        read -n 1 -p " (Yes/no)?" RESPONSE
        tput sgr0
        echo
        case $RESPONSE in
          Y|y)
            EXIT='0' ;;
          N|n)
            EXIT='1' ;;
          *)
            EXIT='2' ;;
        esac
      }

Preliminaries
=============================

To begin, create a fresh copy of :download:`example.sh <_downloads/example.sh>` 
and save it under the name :file:`installer.sh`.

Add function confirm
-----------------------------

The script will need a user confirmation to prevent runaway execution. This is 
supplied by a function in the library, so let's add that to FUNCTIONS now. 

.. admonition:: Instruction

   Add the sidebar code into the "FUNCTIONS" section of :file:`installer.sh`.
   The comments say that variable ``PROMPT`` is required, so declare this 
   variable with the statement ``PROMPT=''`` in the variable declaration 
   section as well.

Initialization Section
-----------------------------

.. sidebar:: Confirm script execution

   .. code-block:: bash

      # check OS type 
      # Uses PROMPT, returns OS, VERSION, EXIT
      read OS < /etc/issue
      case $OS in
        Ubuntu*)
          ARRAY=($OS)
          VERSION=${ARRAY[1]}
          ;;
        Debian*) ;;
        *)
          echo "Not Debian or Ubuntu, exiting ..."
          EXIT='1' ;;
      esac
      # 
      # Check privileges
      if [[ $EUID -ne 0 ]]
      then
        echo -e "\e[1;31m try again using sudo \e[0m"
        EXIT='1'
      else
        # test user confirmation
        PROMPT='Install packages for Kubuntu'
        confirm
      fi
      # 
      if [[ $EXIT -gt 0 ]]
      then exit $EXIT
      fi

Before a script does run, it is necessary to check that the script should run.
Following is a set of conditions that must be satisfied before executing 
:file:`installer.sh`:

*  The system must be Debian or Ubuntu,
*  The user must have ``root`` privileges,
*  The user must confirm the action.

Again, these checks are not specific to the purpose of this script, so a general 
routine will be used.

.. admonition:: Instruction

   Add the sidebar code to the CONFIRMATION section of :file:`installer.sh`. 

For the variables which will be used or returned, add the following variable 
declarations as well::

   PROMPT=''
   EXIT=0
   OS=''
   VERSION=''

Finally, add a couple statements to the program exit section also, so that a 
normal exit can be identified::

   echo $EXIT
   exit $EXIT

.. warning::
   Tests are important for the safety and reliablilty of a program.

Serving the Program Purpose
=============================

This script will use Debian's :program:`apt` software repository system to 
install programs.

Speeding up Installs
-----------------------------

:program:`apt` is slow to retrieve packages, due to latency of software 
repository mirrors. Program :program:`apt-fast` improves download speeds by 
accessing multiple nearby mirrors simultaneously, like torrents do. We want a 
routine to install :program:`apt-fast`, which is cribbed from 
`this website <http://xmodulo.com/speed-slow-apt-get-install-debian-ubuntu.html>`_.
The instructions for Ubuntu 14.04 and previous supported versions are::

   sudo add-apt-repository ppa:apt-fast/stable
   sudo apt-get update
   sudo apt-get install apt-fast

.. note::
   The instructions for installing apt-fast on Debian are provided here, but 
   not implemented in this example script.

   .. code-block:: bash

      sudo apt-get install aria2
      wget https://github.com/ilikenwf/apt-fast/archive/master.zip
      unzip master.zip
      cd apt-fast-master
      sudo cp apt-fast /usr/bin
      sudo cp apt-fast.conf /etc
      sudo cp ./man/apt-fast.8 /usr/share/man/man8
      sudo gzip /usr/share/man/man8/apt-fast.8
      sudo cp ./man/apt-fast.conf.5 /usr/share/man/man5
      sudo gzip /usr/share/man/man5/apt-fast.conf.5

.. sidebar:: Installing apt-fast

   .. code-block:: bash

      apt-fast-install() {
        # uses VERSION, EXIT, PROMPT
        # returns PKGS
        # calls apt-repos, apt-pkgs, confirm
        #
        # check if apt-fast is installed
        PKGS='apt-fast'
        dpkg -s $PKGS > null
        if [ $? -ne 0 ] 
        then
          # determine REPOS for apt-fast
          case VERSION in
            10*|11*|12*|13*|14.04*)
              REPOS='ppa:apt-fast/stable' ;;
            *) 
              echo -e "\e[1;31m apt-fast is not released for $VERSION \e[0m" ;;
          esac
          #
          if [[ $REPOS != '' ]]
          then
            PROMPT='Install program apt-fast'
            confirm
            if [[ $EXIT -gt 0 ]] 
            then
              # not confirmed, reset EXIT
              EXIT='0'
            else
              # install apt-fast
              PKGS='apt-fast'
              apt-repos
              apt-pkgs
            fi
          fi
        fi
      }
 
The first question for this script needs to be, has :program:`apt-fast` been 
installed before? This question must be addressed for the script to be 
*idempotent*.

Next up is to determine if :program:`apt-fast` can be installed: is there a 
repository for it? Using the ``$VERSION`` variable from the starting 
confirmation, a case statement calculates the repository string in ``$REPOS``.

Finally, the user gets choose whether or not to install :program:`apt-fast`. 
This section reuses the ``confirm`` function we started the script with.

.. admonition:: Instruction

   The sidebar code was written specifically to install :program:`apt-fast`. 
   Add this function to the DECLARE FUNCTIONS section of :file:`installer.sh`,
   placing it after function ``confirm()``. Then add the call to function
   ``apt-fast-install`` in the VALIDITY TESTS section of the MAIN program.

In addition to the function code, add statement ``PKGS=''`` to the variable
declarations, and add placeholder functions ``apt-repos() { : }`` and 
``apt-pkgs() { : }`` to the DECLARE FUNCTIONS section above function 
``apt-fast-install()``. 

.. tip::
   Empty functions will generate errors on execution. The ``:`` is a bash 
   built-in equivalent of NOP, or no operation, in the placeholder functions.

.. warning::
   A function should always be declared preceding any calls to the function 
   name.

.. sidebar:: Routine apt-fast-config

   .. code-block:: bash

      apt-fast-config() {
        # updates configuration file /etc/apt-fast.conf 
        MIRRORS='MIRRORS=("http://us.archive.ubuntu.com/ubuntu,'
        MIRRORS+='http://mirror.pnl.gov/ubuntu/,'
        MIRRORS+='http://mirrors.centarra.com/ubuntu/,'
        MIRRORS+='http://mirror.tocici.com/ubuntu/,'
        MIRRORS+='http://mirrors.us.kernel.org/ubuntu/,'
        #
        sed -r "/MIRRORS=.*$/d" -i /etc/apt-fast.conf
        sed -r "$ a\$MIRRORS" -i /etc/apt-fast.conf
      }

Configuring apt-fast
-----------------------------

Configuring :program:`apt-fast` requires selecting up to five mirrors which are 
geographically close to the user. There are about 
`70 U.S. mirrors for Ubuntu <https://launchpad.net/ubuntu/+archivemirrors>`_, 
of which maybe 20% are actually up-to-date, and some of these mirrors have 
limited bandwidth. 

Writing a dynamic configuration routine for :program:`apt-fast` would require 
screen-scraping the Ubuntu mirrors webpages and a fair bit more. As a 
work-around, a mirrors list has been assembled by hand and (ugh!) assigned to a 
variable ``MIRRORS``. This data must be moved to a configuration file ASAP.

.. sidebar:: Routine apt-repos

   .. code-block:: bash

      apt-repos() {
        # uses REPOS, APTMGR, returns APT
        # calls apt-manager
        #
        apt-manager
        # Install repositories listed in variable REPOS
        APT=0
        for NAME in $REPOS
        do
          APT+=1
          apt-add-repository $NAME
        done
        # verify installation and update packages indexes
        if [ $APT -ne 0 ] 
        then
          echo -e "\e[1;32m Updating repository indexes \e[0m"
          $APTMGR -y -f install && apt-get -y update 
        fi
      }
 
Adding a software repository
-----------------------------

This script will use Debian's :program:`apt` software repository system to 
install programs. :program:`apt` can install multiple packages at a time, but 
if any of a list of packages have no installation candidate, the whole list 
will be skipped. Package lists are installed one package at a time to avoid 
skipping.

---

.. sidebar:: Routine apt-pkgs

   .. code-block:: bash

      apt-pkgs() {
        # uses PKGS, APTMGR; returns APT
        # calls apt-manager
        #
        apt-manager
        # Install packages listed in variable PKGS
        APT=0
        for NAME in $PKGS
        do
          dpkg -s $NAME > /dev/null
          if [ $? -ne 0 ]
          then
            APT+=1
            echo -e "\e[1;32m Missing $NAME will be installed \e[0m"
            $APTMGR -y install $NAME
          fi
        done
        # verify installation and update packages indexes
        if [ $APT -ne 0 ]
        then
          echo -e '\e[1;32m Wait as system packages are updated \e[0m'
          $APTMGR -y -f install && apt-get -y update 
        fi
      }

Adding an application
-----------------------------

---

.. sidebar:: Routine apt-manager

   .. code-block:: bash

      apt-manager() {
        # returns APTMGR
        #
        dpkg -s 'apt-fast' > /dev/null
        if [ $? -ne 0 ]
        then
          APTMGR='apt-get'
        else
          APTMGR='apt-fast'
        fi
      }