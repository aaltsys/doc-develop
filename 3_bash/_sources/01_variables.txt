#############################
Variables
#############################


Variable Types
================

There are several different variable types in bash.

+ Declared Local Variables
+ Environment Variables
+ Exported Variables

Declared Variables
=====================

.. sidebar:: Example Declared Variable
  
  Thisvariable="A string"

Declared Variables are those which are declared within a script. an example of a declared variable is: ::

  Variable="This is a string"
  
They are usually declared at the beginning of the shell script.
then, when they're called, the value they've been given is what is used. the value can be changed at any time by re-declaring it, I.E. ::

  Variable="This is now a different string"
 
This can be done anywhere within the script after the original variable is declared.

Environment Variables
========================

Environment Variables are those which are predeclared and can be called from any program, script, or terminal. here's a table of a few Environment Variables

+----------------------+--------------------------------------------------------------+
|Environment Variables | Variable description of use.                                 |
+======================+==============================================================+
| Euid                 | The ID number of the current user.                           |
+----------------------+--------------------------------------------------------------+
|pwd                   | when called, it returns the current directory                |
+----------------------+--------------------------------------------------------------+
|Echo                  | The echo variable simply prints the following text.          |
+----------------------+--------------------------------------------------------------+
|tput setaf 1-7        | A universal color selector.                                  |
+----------------------+--------------------------------------------------------------+ 

Obviously these are just a few of the many Environment Variables, but just to give you an idea of how it works ::

  $PWD
  /home/user: Is a directory
  
That's what happens when you call the pwd Variable from a freshly opened terminal. However, if you were in the Downloads folder you might get ::

  /home/user/Downloads: Is a directory 
  
It all depends on what folder you're in.


Exported Variables
=====================

Exported Variables in bash are Variables that were locally defined(see local variables) and then, well, exported. example ::

  export Variable1="This is an exported variable"
  
An exported Variable's value is then uniform across a shell and all of it's sub-shells.(more on those later) 

for instance: ::
 
  (In a Terminal) Variable="this is my string"
  export $Variable
  (now we write a test script)
  echo $Variable
  (now in the terminal we write)
  bash Test_script.sh
  and it prints the exported value of Variable, which is
  this is my string
  
Here's some things to try: ::

    In a terminal, write
    Twelve=12
    Go ahead and type 
    echo $Twelve (remember that the dollar sign means the value of the variable 12)
    Then type:
    export Twelve
    create a text document called Export.sh
    in the text document type: 
    
    Four=4
    Sixteen=$(($Twelve+$Four))
    echo $Sixteen
    
    now back to the terminal and go to the folder in which you stored Export.sh Now type:
    
    bash Export.sh. you should get: 16
    
Now you can see that an exported variable uses the same value across any script run from that terminal.
But what happens if the exported variable already exists within the script? ::

    In the Export.sh script, type:
    
    Twelve=4
    then go back to the terminal, inside the folder containing Export.sh, and type:
    bash Export.sh
    
As you can see, when the variable is already declared in a script, bash uses the declared varibale rather than the exported one.
Since an exported variable is only good for as long as the terminal is around, It maybe useful to write a script which exports a set of variables that run inside the other scripts.